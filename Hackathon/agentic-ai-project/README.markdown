# Agentic AI Workflow for Student Projects

This project is an AI-driven workflow designed to assist students in generating, organizing, analyzing, scoring, and refining project ideas. It leverages a series of AI agents powered by Google's Gemini LLM (with an optional Anthropic Claude fallback) and LangChain to create a streamlined process for ideation and problem definition. The application is built with Streamlit for an interactive web interface and uses a FAISS vector store for Retrieval-Augmented Generation (RAG) based on a provided PDF document (`AGENTIC AI.pdf`).

## Features
1. **Brainstorm Prompts**: Generates 3-5 tailored brainstorming prompts based on project metadata (title, theme, department) using RAG.
2. **Idea Capture**: Clusters user-provided ideas into thematic groups and suggests visualization diagrams.
3. **Challenge Detection**: Identifies user-centered challenges, including pain points, affected stakeholders, and importance.
4. **Opportunity Scoring**: Scores and ranks opportunities based on feasibility, impact, and empathy, with optional survey results.
5. **Problem Refinement**: Refines the top-ranked opportunity into a concise problem statement and knowledge plan.

## VIDEO LINK (https://drive.google.com/file/d/1BRV7ZlMOccuVUz6wRH_Nxlekb3Zkwx_T/view?usp=sharing)

## Project Structure
```
agentic-ai-project/
├── agents/
│   ├── __init__.py
│   ├── brainstorm.py
│   ├── idea_capture.py
│   ├── challenge_detector.py
│   ├── opportunity_scorer.py
│   ├── problem_refiner.py
├── data/
│   ├── AGENTIC AI.pdf  # Placeholder (user-provided)
├── vectorstore/
│   ├── faiss_index/    # Generated by create_faiss_index.py
├── .env
├── app.py
├── config.py
├── create_faiss_index.py
├── requirements.txt
├── README.md
```

## Prerequisites
- **Python**: Version 3.8 or higher
- **Google API Key**: Required for Gemini LLM (obtain from [Google Cloud Console](https://console.cloud.google.com/)).
- **Optional Anthropic API Key**: For Claude fallback (obtain from [Anthropic](https://www.anthropic.com/)).
- **AGENTIC AI.pdf**: A PDF document placed in `data/` for RAG (user-provided; a dummy PDF can be used for testing).
- **System Dependencies**: Ensure `pip` and `venv` are installed.


## Usage
1. **Run the Application**:
   ```bash
   streamlit run app.py
   ```
   - Opens a web interface in your default browser (typically `http://localhost:8501`).

2. **Follow the Workflow**:
   - **Step 1: Generate Brainstorming Prompts**
     - Enter project metadata (e.g., Title: "Agentic AI Framework", Theme: "agentic AI", Department: "Computer Science").
     - Click "Generate Prompts" to get 3-5 prompts.
   - **Step 2: Capture and Organize Ideas**
     - Enter ideas (one per line, e.g.):
       ```
       Explore a agentic AI solution using AI
       Optimize a process in agentic AI
       Address a challenge in Computer Science
       ```
     - Click "Process Ideas" to cluster ideas and get diagram suggestions.
   - **Step 3: Detect User-Centered Challenges**
     - Click "Analyze Challenges" to identify pain points and stakeholders.
   - **Step 4: Score and Rank Opportunities**
     - Optionally enter survey results (e.g., `Idea: Optimize a process in agentic AI, User Rating: 85/100`).
     - Click "Score Opportunities" to rank ideas.
   - **Step 5: Refine Problem Statement**
     - Click "Refine Problem Statement" to generate a problem statement and knowledge plan for the top opportunity.

3. **View Results**:
   - Each step displays results in the Streamlit interface.
   - Click "Show Conversation Memory" to debug agent interactions.

## Example Output
- **Step 1 (Prompts)**:
  ```
  1. Prompt: Develop a scalable multi-agent system for real-time decision-making in agentic AI applications (Source: Document 1, Page 5)
  2. Prompt: Optimize computational efficiency in agentic AI processes to reduce operational costs (Source: Document 2, Page 12)
  3. Prompt: Design a user-centric interface to improve trust and adoption of agentic AI systems (Source: Document 3, Page 20)
  ```
- **Step 5 (Problem Statement)**:
  ```
  Problem Statement: Businesses and developers face high computational costs in agentic AI processes, hindering scalability and adoption.
  Knowledge Plan:
  - What we know:
    - Agentic AI processes require significant computational resources.
    - Existing frameworks provide a foundation for optimization.
  - What we need to learn:
    - Specific bottlenecks in computational resource usage.
    - Optimization techniques maintaining AI performance.
  ```

## Troubleshooting
- **AttributeError: 'GenerationConfig' has no attribute 'Modality'**:
  - Verify `google-generativeai==0.7.2`:
    ```bash
    pip show google-generativeai
    ```
    Reinstall if incorrect:
    ```bash
    pip uninstall google-generativeai
    pip install google-generativeai==0.7.2
    ```
  - Recreate virtual environment:
    ```bash
    rm -rf venv
    python -m venv venv
    source venv/bin/activate  # or venv\Scripts\activate on Windows
    pip install -r requirements.txt
    ```
- **ImportError: cannot import name 'generate_prompts'**:
  - Ensure `agents/brainstorm.py` contains `def generate_prompts(metadata: Dict[str, str]) -> List[str]:`.
  - Check for duplicate `brainstorm.py` files:
    ```bash
    find . -name "brainstorm.py"  # or dir /s brainstorm.py on Windows
    ```
  - Clear Python cache:
    ```bash
    rm -rf __pycache__ agents/__pycache__  # or rmdir /s /q __pycache__ on Windows
    ```
- **FAISS Vector Store Error**:
  - Ensure `data/AGENTIC AI.pdf` exists and run:
    ```bash
    python create_faiss_index.py
    ```
- **LLM Errors (HTTP 401/429)**:
  - Verify `GOOGLE_API_KEY` in `.env`:
    ```bash
    python -c "import os; from dotenv import load_dotenv; load_dotenv(); print(os.getenv('GOOGLE_API_KEY'))"
    ```
  - Regenerate API key in Google Cloud Console if invalid or quota exceeded.
  - Use Anthropic Claude as fallback by setting `ANTHROPIC_API_KEY` in `.env`.

## Dependencies
- Python packages listed in `requirements.txt` (e.g., `streamlit==1.38.0`, `langchain==0.2.16`, `google-generativeai==0.7.2`).
- Optional: `langchain-anthropic==0.1.23` for Claude fallback.
- External: `AGENTIC AI.pdf` for RAG.

## Contributing
- Report issues or suggest improvements via GitHub issues (if hosted).
- Ensure changes are compatible with `langchain==0.2.16` and `google-generativeai==0.7.2`.

## License
MIT License (or specify your preferred license).

## Acknowledgments
- Built with [Streamlit](https://streamlit.io/), [LangChain](https://www.langchain.com/), and [Google's Gemini API](https://cloud.google.com/generative-ai).
- Optional support for [Anthropic's Claude](https://www.anthropic.com/).
